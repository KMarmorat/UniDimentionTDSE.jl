module UniDimentionTDSE
using LinearAlgebra
export Hamiltonian,simulate,test

struct Gaussian{T}
   x::T 
   p::T
   α::Complex{T}
   γ::Complex{T}
end

function propagate!(ψ,H,Δt)
    ψ .= ((1 .+ im .* H .* Δt./2)\((1 .- im .* H .* Δt./2)* ψ))
end

function Hamiltonian(x::AbstractRange,V,t)
    Δx = step(x)
    midline = V.(x,t) .+ 1/(Δx)^2
    topline = zero(x) .- 1/2(Δx)^2
    SymTridiagonal(midline,topline)
end
function Hamiltonian(x::AbstractRange,V)
    Δx = step(x)
    midline = V.(x) .+ 1/(Δx)^2
    topline = zero(x) .- 1/2(Δx)^2
    SymTridiagonal(midline,topline)
end

function simulate(ψ,Nt::Integer,Δt::Number,H,f;imaginary=false)
    AbstractΔt = imaginary ? im * Δt : Δt
    Values = zeros(Float64,Nt)
    for i = 1:Nt
        propagate!(ψ,H(i*Δt),AbstractΔt)
        imaginary && normalize!(ψ)
        Values[i] = f(ψ)
    end
    (ψ,Values)
end

function gaussian(x::AbstractRange,g::Gaussian)
    @. exp(-g.α * (x-g.x)^2 + im*g.p*(x-g.x) + im*g.γ)
end


function test(Nt,Δt)
    V = x -> 1/2*x.^2
    x = range(-100,100;step= 0.1)
    g = Gaussian{Float64}(0,0,1/2,0)

    H = t -> Hamiltonian(x,V)
    ϕ = ψ -> angle(ψ[end ÷ 2])
    ψ_0 = gaussian(x,g)
    normalize!(ψ_0)
    (x,simulate(ψ_0,Nt,Δt,H,ϕ))
end

end
